-- we can configure basic security in spring boot by adding 2 statements for username and password in application.properties
-- howeever this is not recommended, we are doing it for testing purpose

Example :
spring.security.user.name= Vishal
spring.security.user.password= abc1
=========================================================================
now we have to configure spring security for multiple/all users in which are accessing our project
so to do that we have to create a SecurityConfig class under config package where we will provide our security config for UserDetailsService

syntax : 
@Configuration  // using this annotation we can define multiple beans for each method inside this class
@EnableWebSecurity // the @EnableWebSecurity annotation is a powerful tool that enables developers to configure Spring Security for a web application.
public class SecurityConfig{
}

	create a Bean of UserDetailsService and define 2 user details for now so that they can authenticate by giving username and password before using our application
	@Bean   // create a bean of UserDetailsService to give details about the user which can use our application by authenticating
    // this is authentication of users
	public UserDetailsService userDetailsService(PasswordEncoder encoder){
        // defining a user details
        UserDetails admin = User.withUsername("Vishal")
                .password(encoder.encode("abc1"))
                .roles("ADMIN")
                .build();
        // defining another user details
        UserDetails user = User.withUsername("John")
                .password(encoder.encode("abc2"))
                .roles("USER")
                .build();
        // save the user details in memory usingInMemoryUserDetailsManager(admin, user) for admin and user (users)
        // since we are not using db to store or fetch the details of user. so storing for now in memory to authenticate users
        return new InMemoryUserDetailsManager(admin, user);
    }

	// we will give authorization configuration for our spring boot project as what all endpoints can be accessed via users
	// to do Authorization we will create Bean of SecurityFilterChain and authorize http requests which we want to permit all or authenticate http requests

    @Bean   // this bean if for SecurityFilterChain which is for authorization of users for
    // what endpoints we need to bypass and what endpoints need to be authenticated
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .csrf(csrf -> csrf.disable())   // disable csrf
                .authorizeHttpRequests((requests) -> requests
                        .requestMatchers("/products/welcome").permitAll()   // permit all http requests with /products/welcome
                        .anyRequest().authenticated()   // authenticate all other requests apart from /products/welcome
                )
                .formLogin((form) -> form
                        .permitAll()
                );
        return http.build();

    }

	// create a bean of PasswordEncoder to encrypt password otherwise it may lead to security issues
    @Bean
    public PasswordEncoder passwordEncoder(){
        return new BCryptPasswordEncoder();
    }
=======================================================================================
// code of SecurityConfig class for basic authentication and authorization using username and password form login

	/*
			
		package com.spring.security.config;

	import org.springframework.context.annotation.Bean;
	import org.springframework.context.annotation.Configuration;
	import org.springframework.security.authentication.AuthenticationProvider;
	import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
	import org.springframework.security.config.Customizer;
	import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
	import org.springframework.security.config.annotation.web.builders.HttpSecurity;
	import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
	import org.springframework.security.core.userdetails.User;
	import org.springframework.security.core.userdetails.UserDetails;
	import org.springframework.security.core.userdetails.UserDetailsService;
	import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
	import org.springframework.security.crypto.password.PasswordEncoder;
	import org.springframework.security.provisioning.InMemoryUserDetailsManager;
	import org.springframework.security.web.SecurityFilterChain;

	@Configuration  // using this annotation we can define multiple beans for each method inside this class
	@EnableWebSecurity // the @EnableWebSecurity annotation is a powerful tool that enables developers to configure Spring Security for a web application.
	@EnableMethodSecurity(prePostEnabled = true)    // this annotation is to enable method level security where we can define which all user roles can access which endpoints(can be done with @PreAuthorize(),@PostAuthorize) etc
	public class SecurityConfig {

    // authentication
    @Bean   // create a bean of UserDetailsService to give details about the user which can use our application by authenticating
    // this is authentication of users
    public UserDetailsService userDetailsService(){
        /*
            //-- since we have hardcoded all the user details here itself. this is not what we want. we want to fetch user details from database
            // so we will fetch the user details from db by creating a class which will extends UserDetailsService and return the user details

        // defining a admin user details
        UserDetails admin = User.withUsername("Vishal")
                .password(encoder.encode("abc1"))
                .roles("ADMIN")
                .build();
        // defining another user details
        UserDetails user = User.withUsername("John")
                .password(encoder.encode("abc2"))
                .roles("USER","ADMIN","HR") // we can define multiple roles to an user
                .build();

        // save the user details in memory usingInMemoryUserDetailsManager(admin, user) for admin and user (users)
        // since we are not using db to store or fetch the details of user. so storing for now in memory to authenticate users

        return new InMemoryUserDetailsManager(admin, user);
        */

        return new UserInfoUserDetailsService();    // this class has implemented UserDetailsService interface which will load user by username and also
                                                    // converted UserInfoUserDetailsService to UserInfoUserDetails object as it expects UserInfoUserDetailsUserInfoUserDetails as return type
    }

    // authorization
    @Bean   // this bean if for SecurityFilterChain which is for authorization of users for
    // what endpoints we need to bypass and what endpoints need to be authenticated
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .csrf(csrf -> csrf.disable())   // disable csrf
                .authorizeHttpRequests((requests) -> requests
                        .requestMatchers("/products/welcome", "/products/new", "/products/authenticate").permitAll()   // permit all http requests with /products/welcome, /products/new, /products/authenticate
                        .anyRequest().authenticated()   // authenticate all other requests apart from /products/welcome, /products/new, /products/authenticate
                )
                .formLogin((form) -> form   // enable login as form login which asks for username and password
                        .permitAll()
                );
        return http.build();

    }


    // create a bean of PasswordEncoder to encrypt password otherwise it may lead to security issues
    @Bean
    public PasswordEncoder passwordEncoder(){
        return new BCryptPasswordEncoder();
    }

    // create a bean of AuthenticationProvider which will talk to UserDetailsService and get the details required
    // if we don't create this bean then we will not be able to get the access the endpoints
    @Bean
    public AuthenticationProvider authenticationProvider(){
        // AuthenticationProvider will talk to UserDetailsService and generate the UserDetails object and sent it to Authentication object
        // create object of DaoAuthenticationProvider and set userDetailsService() and PasswordEncoder() in DaoAuthenticationProvider
        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();

        authenticationProvider.setUserDetailsService(userDetailsService()); // set the userDetailsService in authentication provider
        authenticationProvider.setPasswordEncoder(passwordEncoder());   // set the password encoder in authentication provider

        return authenticationProvider;  // now we will be able to access the endpoints via authentication provider.
    }
}


	*/

